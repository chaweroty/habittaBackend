const fs = require('fs');
const path = require('path');
const { sendEmail } = require('../utils/nodemailer.js');

// En CommonJS ya tenemos __dirname disponible

/**
 * Funci√≥n utilitaria para cargar y procesar templates HTML
 * @param {string} templateName - Nombre del archivo template
 * @param {object} variables - Variables a reemplazar en el template
 * @returns {string} - HTML procesado
 */
const loadAndProcessTemplate = (templateName, variables = {}) => {
  try {
    const templatePath = path.join(__dirname, '../scripts', templateName);
    let htmlContent = fs.readFileSync(templatePath, 'utf8');
    
    // Reemplazar variables en el template
    Object.keys(variables).forEach(key => {
      const placeholder = `{{${key}}}`;
      htmlContent = htmlContent.replace(new RegExp(placeholder, 'g'), variables[key]);
    });
    
    return htmlContent;
  } catch (error) {
    console.error(`‚ùå Error cargando template ${templateName}:`, error);
    throw new Error(`No se pudo cargar el template ${templateName}`);
  }
};

/**
 * Env√≠a correo de bienvenida a nuevos usuarios
 * @param {string} email - Email del destinatario
 * @param {string} nombre - Nombre del usuario
 */
const sendWelcomeEmail = async (email, nombre) => {
  try {
    const htmlContent = loadAndProcessTemplate('userwelcome.html', {
      nombre
    });
    
    await sendEmail(
      email,
      '¬°Bienvenido a Habitta! üè†',
      htmlContent
    );
    
    console.log(`‚úÖ Correo de bienvenida enviado a ${email}`);
  } catch (error) {
    console.error('‚ùå Error enviando correo de bienvenida:', error);
    throw error;
  }
};

/**
 * Env√≠a correo con c√≥digo de confirmaci√≥n para verificar cuenta
 * @param {string} email - Email del destinatario
 * @param {string} nombre - Nombre del usuario
 * @param {string} codigo - C√≥digo de confirmaci√≥n de 6 d√≠gitos
 */
const sendConfirmationEmail = async (email, nombre, codigo) => {
  try {
    const htmlContent = loadAndProcessTemplate('userconfirmation.html', {
      nombre,
      codigo
    });
    
    await sendEmail(
      email,
      'C√≥digo de Confirmaci√≥n - Habitta',
      htmlContent
    );
    
    console.log(`‚úÖ C√≥digo de confirmaci√≥n enviado a ${email}`);
  } catch (error) {
    console.error('‚ùå Error enviando c√≥digo de confirmaci√≥n:', error);
    throw error;
  }
};

/**
 * Env√≠a correo de notificaci√≥n de propietario verificado
 * @param {string} email - Email del destinatario
 * @param {string} nombre - Nombre del usuario
 */
const sendOwnerVerifiedEmail = async (email, nombre) => {
  try {
    const htmlContent = loadAndProcessTemplate('ownerverified.html', {
      nombre
    });
    
    await sendEmail(
      email,
      '¬°Verificaci√≥n Aprobada! Ya puedes publicar propiedades - Habitta',
      htmlContent
    );
    
    console.log(`‚úÖ Notificaci√≥n de propietario verificado enviada a ${email}`);
  } catch (error) {
    console.error('‚ùå Error enviando notificaci√≥n de propietario verificado:', error);
    throw error;
  }
};

/**
 * Env√≠a correo con c√≥digo para restablecer contrase√±a
 * @param {string} email - Email del destinatario
 * @param {string} nombre - Nombre del usuario
 * @param {string} codigo - C√≥digo de restablecimiento de 6 d√≠gitos
 */
const sendPasswordResetEmail = async (email, nombre, codigo) => {
  try {
    const htmlContent = loadAndProcessTemplate('passwordreset.html', {
      nombre,
      codigo
    });
    
    await sendEmail(
      email,
      'Restablecer Contrase√±a - Habitta',
      htmlContent
    );
    
    console.log(`‚úÖ C√≥digo de restablecimiento de contrase√±a enviado a ${email}`);
  } catch (error) {
    console.error('‚ùå Error enviando c√≥digo de restablecimiento:', error);
    throw error;
  }
};

/**
 * Funci√≥n utilitaria para generar c√≥digos de verificaci√≥n
 * @param {number} length - Longitud del c√≥digo (por defecto 6)
 * @returns {string} - C√≥digo generado
 */
const generateVerificationCode = (length = 6) => {
  return Math.floor(Math.random() * Math.pow(10, length))
    .toString()
    .padStart(length, '0');
};

// Exportar todas las funciones usando CommonJS
module.exports = {
  sendWelcomeEmail,
  sendConfirmationEmail,
  sendOwnerVerifiedEmail,
  sendPasswordResetEmail,
  generateVerificationCode,
  // Tambi√©n exportar como EmailService para compatibilidad
  EmailService: {
    sendWelcomeEmail,
    sendConfirmationEmail,
    sendOwnerVerifiedEmail,
    sendPasswordResetEmail,
    generateVerificationCode
  }
};